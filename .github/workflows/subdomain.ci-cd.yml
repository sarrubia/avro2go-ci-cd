name: Subdomain Reusable Workflow
on:
  workflow_call:
    inputs:
      domain:
        required: true
        type: string
      subdomain:
        required: true
        type: string
      subdomainPath:
        required: true
        type: string

jobs:
  split_evaluator:
    name: Eval Splits
    runs-on: ubuntu-latest
    steps:
      - name: Evaluate action step
        id: evaluator
        uses: sarrubia/splitio-evaluator-ga@v1.0
        with:
          api-key: ${{ secrets.SPLIT_API_KEY }}
          key: "GLOBAL"
          splits: |
            enable_java
    # The job outputs must be sets in order to share the evaluation results
    outputs:
      treatments: ${{ steps.evaluator.outputs.result }}

  integration:
    name: "[CI] Test models creation"
    if: github.event_name == 'pull_request'
    needs: split_evaluator
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Checking errors on model creation
        run: ./go/cmd/avro2go -input-dir="${{ inputs.subdomainPath }}" -dry-run

      - name: Set up JDK 11
        if: ${{ fromJson(needs.split_evaluator.outputs.treatments).enable_java == 'on' }}
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'

      - name: Java build
        if: ${{ fromJson(needs.split_evaluator.outputs.treatments).enable_java == 'on' }}
        env:
          JAR_VERSION: ${{ steps.tag_version.outputs.number }}
          DOMAIN: ${{ inputs.domain }}
          SUBDOMAIN: ${{ inputs.subdomain }}
        run: ./gradlew build

  deployment:
    name: "[CD] Create Models"
    if: github.event_name == 'push'
    needs: split_evaluator
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Autogenerate version
        run: make version FILENAME=${{ inputs.subdomainPath }}/version.properties GITHUB_RUN_ID=${{ github.run_id }}

      - name: Checking version
        run: sh go/cmd/checkTag.sh ${{ inputs.subdomainPath }}/version.properties

      - name: Exporting version from properties
        id: tag_version
        run: echo "::set-output name=number::$(./go/cmd/goProperties -file='${{ inputs.subdomainPath }}/version.properties' -key='version')"

# JAVA
      - name: Set up JDK 11
        if: ${{ fromJson(needs.split_evaluator.outputs.treatments).enable_java == 'on' }}
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'

      - name: Java build
        if: ${{ fromJson(needs.split_evaluator.outputs.treatments).enable_java == 'on' }}
        env:
          JAR_VERSION: ${{ steps.tag_version.outputs.number }}
          DOMAIN: ${{ inputs.domain }}
          SUBDOMAIN: ${{ inputs.subdomain }}
        run: ./gradlew clean build

      - name: Java publish
        if: ${{ fromJson(needs.split_evaluator.outputs.treatments).enable_java == 'on' }}
        run: ./gradlew publish

# GO
      - name: Create GO models from Avro schemas
        run: ./go/cmd/avro2go -input-dir="${{ inputs.subdomainPath }}" -output-dir="go/models"

# CHANGES AND PUSH
      - name: Fetch modified files
        id: files
        uses: jitterbit/get-changed-files@v1
        with:
          format: 'csv'
      - name: Write CHANGES
        run: |
          NL='\n'
          CHANGE="## v${{ steps.tag_version.outputs.number }}${NL}"
          mapfile -d ',' -t added_files < <(printf '%s,' '${{ steps.files.outputs.added }}')
          added_size=($added_files)
          if [ "${#added_size[@]}" -gt "0" ]
          then
            BLOCK="#### Added${NL}"
            for file in "${added_files[@]}"; do
              BLOCK+="- ${file}${NL}"
            done
            BLOCK+=${NL}
            CHANGE+=$BLOCK
          fi
          mapfile -d ',' -t removed_files < <(printf '%s,' '${{ steps.files.outputs.removed }}')
          removed_size=($removed_files)
          if [ "${#removed_size[@]}" -gt "0" ]
          then
            BLOCK="#### Removed${NL}"
            for file in "${removed_files[@]}"; do
              BLOCK+="- ${file}${NL}"
            done
            BLOCK+=${NL}
            CHANGE+=$BLOCK
          fi
          mapfile -d ',' -t renamed_files < <(printf '%s,' '${{ steps.files.outputs.renamed }}')
          renamed_size=($renamed_files)
          if [ "${#renamed_size[@]}" -gt "0" ]
          then
            BLOCK="#### Renamed${NL}"
            for file in "${renamed_files[@]}"; do
              BLOCK+="- ${file}${NL}"
            done
            BLOCK+=${NL}
            CHANGE+=$BLOCK
          fi
          mapfile -d ',' -t modified_files < <(printf '%s,' '${{ steps.files.outputs.modified }}')
          modified_size=($modified_files)
          if [ "${#modified_size[@]}" -gt "0" ]
          then
            BLOCK="#### Modified${NL}"
            for file in "${modified_files[@]}"; do
              BLOCK+="- ${file}${NL}"
            done
            BLOCK+=${NL}
            CHANGE+=$BLOCK
          fi
          echo -e $CHANGE >> ${{ inputs.subdomainPath }}/CHANGES.md

      - name: Commit files
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "GitHub Action"
          git add . 
          git commit -m "Adding Go models from Avro schema by bot"
          git tag -m "Version ${{ steps.tag_version.outputs.number }}" -a v${{ steps.tag_version.outputs.number }}

      - name: Push files
        uses: ad-m/github-push-action@master
        with:
          branch: main
          github_token: ${{ secrets.GITHUB_TOKEN }}
          force: true
          tags: true
